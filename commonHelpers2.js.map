{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nlet chosenDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    const dateObject = new Date(selectedDates[0]);\n    const dateInMilliseconds = dateObject.getTime();\n\n    if (dateInMilliseconds < Date.now()) {\n      window.alert('You must choose date from the future');\n      return;\n    }\n\n    chosenDate = dateInMilliseconds;\n    removeAttribute(startBtn, 'disabled');\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\nconst startBtn = document.querySelector('[data-start]');\n\nstartBtn.addEventListener('click', onStart);\nsetAttribute(startBtn, 'disabled', true);\n\nfunction onStart() {\n  setInterval(() => {\n    const { days, hours, minutes, seconds } = convertMs(\n      chosenDate - Date.now()\n    );\n    setValueInMarkup(daysValue, days);\n    setValueInMarkup(hoursValue, hours);\n    setValueInMarkup(minutesValue, minutes);\n    setValueInMarkup(secondsValue, seconds);\n  }, 1000);\n}\n\nfunction setValueInMarkup(valueInMarkup, valueToSet) {\n  valueInMarkup.textContent = valueToSet > 0 ? valueToSet.toString() : '00';\n}\n\nfunction setAttribute(element, attribute, value) {\n  element.setAttribute(attribute, value);\n}\n\nfunction removeAttribute(element, attribute) {\n  element.removeAttribute(attribute);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["chosenDate","options","selectedDates","dateInMilliseconds","removeAttribute","startBtn","flatpickr","daysValue","hoursValue","minutesValue","secondsValue","onStart","setAttribute","days","hours","minutes","seconds","convertMs","setValueInMarkup","valueInMarkup","valueToSet","element","attribute","value","ms"],"mappings":"wIAGA,IAAIA,EAAa,KAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CAErB,MAAMC,EADa,IAAI,KAAKD,EAAc,EAAE,EACN,UAEtC,GAAIC,EAAqB,KAAK,MAAO,CACnC,OAAO,MAAM,sCAAsC,EACnD,MACD,CAEDH,EAAaG,EACbC,EAAgBC,EAAU,UAAU,CACrC,CACH,EAEAC,EAAU,mBAAoBL,CAAO,EAErC,MAAMM,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAEtDL,EAAW,SAAS,cAAc,cAAc,EAEtDA,EAAS,iBAAiB,QAASM,CAAO,EAC1CC,EAAaP,EAAU,WAAY,EAAI,EAEvC,SAASM,GAAU,CACjB,YAAY,IAAM,CAChB,KAAM,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,EAAGC,EACxCjB,EAAa,KAAK,IAAK,CAC7B,EACIkB,EAAiBX,EAAWM,CAAI,EAChCK,EAAiBV,EAAYM,CAAK,EAClCI,EAAiBT,EAAcM,CAAO,EACtCG,EAAiBR,EAAcM,CAAO,CACvC,EAAE,GAAI,CACT,CAEA,SAASE,EAAiBC,EAAeC,EAAY,CACnDD,EAAc,YAAcC,EAAa,EAAIA,EAAW,SAAU,EAAG,IACvE,CAEA,SAASR,EAAaS,EAASC,EAAWC,EAAO,CAC/CF,EAAQ,aAAaC,EAAWC,CAAK,CACvC,CAEA,SAASnB,EAAgBiB,EAASC,EAAW,CAC3CD,EAAQ,gBAAgBC,CAAS,CACnC,CAEA,SAASL,EAAUO,EAAI,CAMrB,MAAMX,EAAO,KAAK,MAAMW,EAAK,KAAG,EAE1BV,EAAQ,KAAK,MAAOU,EAAK,MAAO,IAAI,EAEpCT,EAAU,KAAK,MAAQS,EAAK,MAAO,KAAQ,GAAM,EAEjDR,EAAU,KAAK,MAASQ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAX,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}